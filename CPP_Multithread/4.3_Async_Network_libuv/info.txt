// engine for node.js

int counter = 0; // callback helper

callback:
    void cb(uv_idle_t *handle) {
        counter++;
        if (counter == 1e6) // 1mil
            uv_idle_stop(handle);
    }

main:

uv_loop_t *loop = malloc(sizeof(uv_loop_t));
uv_loop_init(loop);

uv_idle_t idler;
uv_idle_init(loop, &idler);
uv_idle_start(&idler, cb);

uv_run(loop, UV_RUN_DEFAULT);

uv_loop_close(loop);
free(loop);


*** Example unix `cat` ***
main:
uv_fs_open(uv_default_loop(), &open_req, argv[1], O_RDONLY, 0, on_open);
uv_run(uv_default_loop(), UV_RUN_DEFAULT);
uv_fs_req_cleanup(&open_req); // +read_req, +write_req

callback:
on_open:
if (req->result >= 0) {
    iov = uv_buf_init(buffer, sizeof(buffer));
    uv_fs_read(uv_default_loop(), &read_req, req->result, &iov, 1, -1, on_read);
}
on_read:
if (req->result < 0) {
    // Error
} else if (req->result == 0) {
    uv_fs_close(uv_default_loop(), &close_req, open_req->result, NULL);
} else {
    iov.len = req->result;
    uv_fs_write(uv_default_loop(), &write_req, 1, iov, 1, -1, on_write);
}
on_write:
if (req->result < 0) {
    // Error
} else {
    uv_fs_read(uv_default_loop(), &read_req, open_req->result, &iov, 1, -1, on_read);
}


*** Network example ***
uv_stream_t
---server---
int uv_read_start(uv_stream_t *, // read while manual stop call
                  uv_alloc_cb,
                  uv_read_cb);
int uv_read_stop(uv_stream_t *);

int uv_write(uv_write_t *req,
             uv_stream_t *handle,
             const uv_buf_t bufs[],
             unsigned int ubufs,
             uv_write_cb cb);

auto loop = uv_default_loop();
uv_tcp_t server;
uv_tcp_init(loop, &server);
uv_ip4_addr("0.0.0.0", DEFAULT_PORT, &addr);
uv_tcp_bind(&server, (const struct sockaddr *)&addr, 0);
uv_listen((uv_stream_t *)&server, DEFAULT_BACKLOG, on_new_connection);
uv_run(loop, UV_RUN_DEFAULT);

void on_new_connection(uv_stream_t *server, int status) {
    if (status < 0) {
        // Error
    } else {
        uv_tcp_t *client = (uv_tcp_t *)malloc(...);
        uv_tcp_init(loop, client);
        if (uv_accept(server, (uv_stream_t *)&client) == 0) {
            uv_read_start((uv_stream_t *)&client, alloc_buffer_cb, echo_read_cb);
        } else {
            uv_close(client, NULL);
        }
    }
}

---client---
uv_tcp_t *socket = malloc(...);
uv_tcp_init(loop, socket);

uv_connect_t *connect = malloc(...);

... sockaddr dest
uv_ip4_addr("127.0.0.1", 80, &dest);

uv_tcp_connect(connect, socket, dest, on_connect_cb);

